package jsweet.dom;
/**  <p>A <code>CloseEvent</code> is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the <code>WebSocket</code> object's <code>onclose</code> attribute.</p>  */
public class CloseEvent extends Event {
    /** 
 Returns an <code>unsigned short</code> containing the close code send by the server. The following values are permitted status codes. <table> <tbody> <tr> <td>Status code</td> <td>Name</td> <td>Description</td> </tr> <tr> <td><code>0</code>–<code>999</code></td> <td>&nbsp;</td> <td><strong>Reserved and not used.</strong></td> </tr> <tr> <td><code>1000</code></td> <td><code>CLOSE_NORMAL</code></td> <td>Normal closure; the connection successfully completed whatever purpose for which it was created.</td> </tr> <tr> <td><code>1001</code></td> <td><code>CLOSE_GOING_AWAY</code></td> <td>The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.</td> </tr> <tr> <td><code>1002</code></td> <td><code>CLOSE_PROTOCOL_ERROR</code></td> <td>The endpoint is terminating the connection due to a protocol error.</td> </tr> <tr> <td><code>1003</code></td> <td><code>CLOSE_UNSUPPORTED</code></td> <td>The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).</td> </tr> <tr> <td><code>1004</code></td> <td>&nbsp;</td> <td><strong>Reserved.</strong> A meaning might be defined in the future.</td> </tr> <tr> <td><code>1005</code></td> <td><code>CLOSE_NO_STATUS</code></td> <td><strong>Reserved.</strong>&nbsp; Indicates that no status code was provided even though one was expected.</td> </tr> <tr> <td><code>1006</code></td> <td><code>CLOSE_ABNORMAL</code></td> <td><strong>Reserved.</strong> Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.</td> </tr> <tr> <td><code>1007</code></td> <td>&nbsp;</td> <td>The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).</td> </tr> <tr> <td><code>1008</code></td> <td>&nbsp;</td> <td>The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.</td> </tr> <tr> <td><code>1009</code></td> <td><code>CLOSE_TOO_LARGE</code></td> <td>The endpoint is terminating the connection because a data frame was received that is too large.</td> </tr> <tr> <td><code>1010</code></td> <td>&nbsp;</td> <td>The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.</td> </tr> <tr> <td><code>1011</code></td> <td>&nbsp;</td> <td>The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.</td> </tr> <tr> <td><code>1012</code>–<code>1014</code></td> <td>&nbsp;</td> <td><strong>Reserved for future use by the WebSocket standard.</strong></td> </tr> <tr> <td><code>1015</code></td> <td>&nbsp;</td> <td><strong>Reserved.</strong> Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).</td> </tr> <tr> <td><code>1016</code>–<code>1999</code></td> <td>&nbsp;</td> <td><strong>Reserved for future use by the WebSocket standard.</strong></td> </tr> <tr> <td><code>2000</code>–<code>2999</code></td> <td>&nbsp;</td> <td><strong>Reserved for use by WebSocket extensions.</strong></td> </tr> <tr> <td><code>3000</code>–<code>3999</code></td> <td>&nbsp;</td> <td>Available for use by libraries and frameworks. <strong>May not</strong> be used by applications.</td> </tr> <tr> <td><code>4000</code>–<code>4999</code></td> <td>&nbsp;</td> <td>Available for use by applications.</td> </tr> </tbody> </table>  */
    public double code;
    /** 
 Returns a <code>DOMString</code> indicating the reason the server closed the connection. This is specific to the particular server and sub-protocol.  */
    public String reason;
    /** 
 Returns a <code>Boolean</code> that Indicates whether or not the connection was cleanly closed.  */
    public Boolean wasClean;
    /** 
 Initializes the value of a <code>CloseEvent</code> created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the <code>CloseEvent()</code> constructor instead.  */
    native public void initCloseEvent(String typeArg, Boolean canBubbleArg, Boolean cancelableArg, Boolean wasCleanArg, double codeArg, String reasonArg);
    public static CloseEvent prototype;
    public CloseEvent(){}
}

